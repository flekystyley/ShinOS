     1                                  %include "../include/define.asm"
     1                              <1>     BOOT_LOAD equ 0x7C00                    ; Start Boot Program position.
     2                              <1>     BOOT_SIZE equ (1024 * 8)                ; Boot Code Size.
     3                              <1>     SECT_SIZE equ (512)                     ; Sector Size.
     4                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; Boot Program to Sector Count.
     2                                  %include "../include/macro.asm"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0-1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>         .no   resw  1               ; Drive Number.
    19 00000002 <res 00000002>      <1>         .cyln resw  1               ; Cylinder.
    20 00000004 <res 00000002>      <1>         .head resw  1               ; Head.
    21 00000006 <res 00000002>      <1>         .sect resw  1               ; Sector.
    22                              <1> endstruc
     3                                      ORG BOOT_LOAD               ; Configuration Load Address.
     4                                  
     5                                  entry:
     6 00000000 EB58                        jmp ipl
     7 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
     8                                  
     9                                      ;---------------------
    10                                      ; - IPL(Initiali Loading Program).
    11                                      ;---------------------
    12                                  ipl:
    13 0000005A FA                          cli                         ; don't allow interrupt.
    14 0000005B B80000                      mov ax, 0x0000              ; AX = 0x0000;
    15                                  
    16 0000005E 8ED8                        mov ds, ax                  ; ds = ax.
    17 00000060 8EC0                        mov es, ax                  ; es = ax.
    18 00000062 8ED0                        mov ss, ax                  ; ss = ax.
    19 00000064 BC007C                      mov sp, BOOT_LOAD           ; sp = BOOT_:LOAD
    20                                  
    21 00000067 FB                          sti                         ; allow interupt.
    22                                  
    23 00000068 8816[B800]                  mov [BOOT + drive.no], dl   ; Saving Boot Drive.
    24                                  
    25 0000006C 68[9900]E84E0083C4-         cdecl putc, .s0
    25 00000074 02                 
    26                                  
    27                                  
    28                                      ;---------------------
    29                                      ; - Import all remaining sectors.
    30                                      ;---------------------
    31                                  
    32 00000075 BB0F00                      mov bx, BOOT_SECT - 1         ; Remaing Boot Sector.
    33 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE ; Next Loading Address.
    34                                  
    35 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx  ; AX - read_chs(.chs, bx, cx)
    35 00000083 83C406             
    36                                  
    37 00000086 39D8                        cmp ax, bx
    38                                  
    39 00000088 740C                    .10Q: jz .10E
    40 0000008A 68[A600]E8300083C4-     .10T: cdecl putc, .e0
    40 00000092 02                 
    41 00000093 E84900                      call reboot
    42                                  .10E:
    43 00000096 E96701                      jmp stage_2
    44                                  
    45 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0
    45 000000A2 2E0A0D00           
    46 000000A6 4572726F7220736563-     .e0 db "Error sector read", 0
    46 000000AF 746F72207265616400 
    47                                  
    48                                  ALIGN 2, db 0
    49                                  BOOT:
    50                                      istruc drive
    51 000000B8 0000                         at drive.no,   dw 0
    52 000000BA 0000                         at drive.cyln, dw 0
    53 000000BC 0000                         at drive.head, dw 0
    54 000000BE 0200                         at drive.sect, dw 2
    55                                      iend
    56                                  
    57                                      ;---------------------
    58                                      ; - Modules.
    59                                      ;---------------------
    60                                      %include "../modules/real_mode/putc.asm"
     1                              <1> putc:
     2                              <1>     ;---------------------
     3                              <1>     ; Create Stack Frame.
     4                              <1>     ;---------------------
     5 000000C0 55                  <1>     push bp          ; push to stack base pointer register.
     6 000000C1 89E5                <1>     mov  bp, sp      ; bp = sp. set top stack.
     7                              <1> 
     8                              <1>     ;---------------------
     9                              <1>     ; Saving Register.
    10                              <1>     ;---------------------
    11 000000C3 50                  <1>     push ax         ; ax (ah, al)
    12 000000C4 53                  <1>     push bx         ; bx
    13 000000C5 56                  <1>     push si         ; si
    14                              <1> 
    15                              <1>     ;---------------------
    16                              <1>     ; Get func argument.
    17                              <1>     ;---------------------
    18 000000C6 8B7604              <1>     mov si, [bp + 4]
    19                              <1> 
    20                              <1>     ;---------------------
    21                              <1>     ; Starting put process.
    22                              <1>     ;---------------------
    23 000000C9 B40E                <1>     mov ah, 0x0E    ; show Character output.
    24 000000CB BB0000              <1>     mov bx, 0x0000  ; set page number & text color to 0
    25 000000CE FC                  <1>     cld             ; DF = 0.
    26                              <1> 
    27                              <1> .10L:               ; do
    28                              <1>                     ; {
    29 000000CF AC                  <1>     lodsb           ; AL = *SI++.
    30                              <1>                     ;
    31 000000D0 3C00                <1>     cmp al, 0       ; if(0 == AL)
    32 000000D2 7404                <1>     je .10E         ; break
    33                              <1>                     ;
    34 000000D4 CD10                <1>     int 0x10        ; Int10(0x0E, AL); prrint char.
    35 000000D6 EBF7                <1>     jmp .10L        ;
    36                              <1> .10E:               ; while(1)
    37                              <1> 
    38                              <1>     ;---------------------
    39                              <1>     ; return Register.
    40                              <1>     ;---------------------
    41 000000D8 5E                  <1>     pop si
    42 000000D9 5B                  <1>     pop bx
    43 000000DA 58                  <1>     pop ax
    44                              <1> 
    45                              <1>     ;---------------------
    46                              <1>     ; reset Stack frame.
    47                              <1>     ;---------------------
    48 000000DB 89EC                <1>     mov sp, bp
    49 000000DD 5D                  <1>     pop bp
    50 000000DE C3                  <1>     ret
    61                                      %include "../modules/real_mode/reboot.asm"
     1                              <1> reboot:
     2                              <1>     ;; Show Message.
     3 000000DF 68[FB00]E8DBFF83C4- <1>     cdecl putc, .s0             ; Show Rebooting Message.
     3 000000E7 02                  <1>
     4                              <1> 
     5                              <1>     ;; Waiting for keyboard.
     6                              <1> .10L:                           ; do
     7                              <1>                                 ; {
     8 000000E8 B410                <1>     mov ah, 0x10                ; // Wating for input keyboard.
     9 000000EA CD16                <1>     int 0x16                    ; // AL = BIOS(0x16, 0x10)
    10                              <1>                                 ;
    11 000000EC 3C00                <1>     cmp al, ''                  ; ZF == AL == '';
    12 000000EE 75F8                <1>     jne .10L                    ; } while(ZF)
    13                              <1> 
    14                              <1>     ;; Return Space.
    15 000000F0 68[1901]E8CAFF83C4- <1>     cdecl putc, .s1
    15 000000F8 02                  <1>
    16                              <1> 
    17                              <1>     ;; Reboot.
    18 000000F9 CD19                <1>     int 0x19                    ; BIOS(0x19); reboot()
    19                              <1> 
    20                              <1>     ;; Character Data.
    21                              <1>     ;; .s0 is character value.
    22                              <1>     ;; .s1 is new line.
    23 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    23 00000104 414345206B65792074- <1>
    23 0000010D 6F207265626F6F742E- <1>
    23 00000116 2E2E00              <1>
    24 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    62                                      %include "../modules/real_mode/read_chs.asm"
     1                              <1> ;; Reading Sector Function.
     2                              <1> read_chs:
     3                              <1>     ;---------------------
     4                              <1>     ; -Create Stack Frame.
     5                              <1>     ;---------------------
     6                              <1> 
     7                              <1>     ;; +8 | copy to
     8                              <1>     ;; +6 | sector count.
     9                              <1>     ;; +4 | buffer parameter.
    10                              <1>     ;; +2 | IP(return address.)
    11                              <1>     ;; BP+0 | BP(base pointer)
    12                              <1> 
    13 0000011E 55                  <1>     push bp
    14 0000011F 89E5                <1>     mov  bp, sp
    15 00000121 6A03                <1>     push 3                      ; -2 | retry = 3
    16 00000123 6A00                <1>     push 0                      ; Reading sector count.
    17                              <1> 
    18                              <1>     ;; Saving Register.
    19 00000125 53                  <1>     push bx
    20 00000126 51                  <1>     push cx
    21 00000127 52                  <1>     push dx
    22 00000128 06                  <1>     push es
    23 00000129 56                  <1>     push si
    24                              <1> 
    25                              <1>     ;; Starting Process.
    26 0000012A 8B7604              <1>     mov si, [bp + 4]                ; si = buffer parameter.
    27                              <1> 
    28                              <1>     ;; Configure CX Register
    29 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0] ; ch = Cylinder Number.
    30 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1] ; cl = Cylinder Number.
    31                              <1> 
    32 00000133 C0E106              <1>     shl cl, 6                     ; cl << 6 Shift to top 2 bits.
    33 00000136 0A4C06              <1>     or  cl, [si + drive.sect]    ; cl |= Sector Number.
    34                              <1> 
    35                              <1>     ;-------------------
    36                              <1>     ; - Reading Sector.
    37                              <1>     ;-------------------
    38 00000139 8A7404              <1>     mov dh, [si + drive.head]     ; dh = Head Number.
    39 0000013C 8A14                <1>     mov dl, [si + 0]              ; dl = Drive Number.
    40 0000013E B80000              <1>     mov ax, 0x0000                ; ax = 0x0000.
    41 00000141 8EC0                <1>     mov es, ax                    ; es = Segment.
    42 00000143 8B5E08              <1>     mov bx, [bp + 8]              ; bx = Copy to
    43                              <1> 
    44                              <1> .10L:
    45 00000146 B402                <1>     mov ah, 0x02                  ; ah = Reading Sector.
    46 00000148 8A4606              <1>     mov al, [bp + 6]              ; al = sector count.
    47                              <1> 
    48 0000014B CD13                <1>     int 0x13                      ; CF(0x13, 0x12)
    49 0000014D 7304                <1>     jnc .11E                      ; if(CF)
    50                              <1> 
    51 0000014F B000                <1>     mov al, 0                     ; al = 0
    52 00000151 EB0C                <1>     jmp .10E                      ; break
    53                              <1> .11E:
    54 00000153 3C00                <1>     cmp al, 0
    55 00000155 7508                <1>     jne .10E
    56                              <1> 
    57 00000157 B80000              <1>     mov ax, 0                       ; ret = 0
    58 0000015A FF4EFE              <1>     dec word[bp - 2]                ;
    59 0000015D 75E7                <1>     jnz .10L                        ; while(-retry)
    60                              <1> .10E:
    61 0000015F B400                <1>     mov ah, 0                       ; ah = 0. removing status information.
    62                              <1> 
    63                              <1>     ;--------------------
    64                              <1>     ; - Return registers.
    65                              <1>     ;--------------------
    66 00000161 5E                  <1>     pop si
    67 00000162 07                  <1>     pop es
    68 00000163 5A                  <1>     pop dx
    69 00000164 59                  <1>     pop cx
    70 00000165 5B                  <1>     pop bx
    71                              <1> 
    72                              <1>     ;--------------------
    73                              <1>     ; - Remove Stack Frame.
    74                              <1>     ;--------------------
    75 00000166 89EC                <1>     mov sp, bp
    76 00000168 5D                  <1>     pop bp
    77 00000169 C3                  <1>     ret
    63                                  
    64                                      ;---------------------
    65                                      ; - Boot Flag.
    66                                      ;---------------------
    67 0000016A 00<rept>                    times 510 - ($ - $$) db 0x00
    68 000001FE 55AA                        db 0x55, 0xAA
    69                                  
    70                                  stage_2:
    71                                          ;---------------------
    72                                          ; - Second Stage.
    73                                          ;---------------------
    74 00000200 68[0B02]E8BAFE83C4-             cdecl putc, .s0
    74 00000208 02                 
    75                                  
    76 00000209 EBFE                            jmp $
    77                                  
    78 0000020B 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
    78 00000214 2E2E2E0A0D00       
    79                                  
    80                                      ;---------------------
    81                                      ; - Padding.
    82                                      ;---------------------
    83                                  
    84 0000021A 00<rept>                    times BOOT_SIZE - ($ - $$) db -0
