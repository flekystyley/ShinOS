     1                                  ;---------------------
     2                                  ; - Configration Start to Boot Program Address.
     3                                  ;---------------------
     4                                  BOOT_LOAD equ 0x7c00    ; load to start boot program address.
     5                                  ORG       BOOT_LOAD     ; instruction load address to assembler.
     6                                  
     7                                  ;---------------------
     8                                  ; - Declaration Macro.
     9                                  ;---------------------
    10                                  %include "../include/macro.asm"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0-1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    11                                  
    12                                  entry:
    13                                      ;---------------------
    14                                      ; - BPB(BIOS Parameter Block).
    15                                      ; - First calling to ipl label.
    16                                      ; - BIOS Needs Information.
    17                                      ; - 0x90 set to 90bytes.
    18                                      ; - NOP(do no something).
    19                                      ;---------------------
    20 00000000 EB58                        jmp   ipl
    21 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    22                                  
    23                                  ipl:
    24 0000005A FA                          cli                 ; disable interrupt.
    25                                  
    26                                      ;------------------
    27                                      ; - Configuration Segment Register.
    28                                      ; - Segment is separate memory blocks.
    29                                      ; - Initialize Register.
    30                                      ;-------------------
    31 0000005B B80000                      mov ax, 0x0000      ; AX = 0x0000;
    32                                  
    33 0000005E 8ED8                        mov ds, ax          ; DS = 0x0000;
    34 00000060 8EC0                        mov es, ax          ; ES = 0x0000;
    35 00000062 8ED0                        mov ss, ax          ; SS = 0x0000;
    36                                  
    37                                      ;---------------------
    38                                      ; - Stack the boot program start position on the stack pointer.
    39                                      ;---------------------
    40 00000064 BC007C                      mov sp, BOOT_LOAD    ; SP = 0x7c00;
    41                                  
    42 00000067 FB                          sti                 ; enable interrupt.
    43                                  
    44                                      ;---------------------
    45                                      ; - Saving Boot Drive.
    46                                      ; - dl register is I/O register.
    47                                      ;---------------------
    48 00000068 8816[BC00]                  mov [BOOT.DRIVE], dl
    49                                  
    50                                      ;--------------------
    51                                      ; - Call putc function, argument is '.s0'.
    52                                      ; - Call reboot function, nothing argument.
    53                                      ;--------------------
    54 0000006C 68[9D00]E84C0083C4-         cdecl putc, .s0
    54 00000074 02                 
    55                                  
    56                                      ;--------------------
    57                                      ; - Reading Next 521 bytes.
    58                                      ;--------------------
    59 00000075 B402                        mov ah, 0x02
    60 00000077 B001                        mov al, 1
    61 00000079 B90200                      mov cx, 0x0002
    62 0000007C B600                        mov dh, 0x00
    63 0000007E 8A16[BC00]                  mov dl, [BOOT.DRIVE]
    64 00000082 BB007E                      mov bx, 0x7C00 + 512
    65 00000085 CD13                        int 0x13
    66 00000087 730C                    .10Q: jnc .10E
    67 00000089 68[AA00]E82F0083C4-     .10T: cdecl putc, .e0
    67 00000091 02                 
    68 00000092 E84800                      call reboot
    69                                  .10E:
    70 00000095 E96801                      jmp stage_2
    71                                  
    72 00000098 E84200                      cdecl reboot
    73                                  
    74                                      ;--------------------
    75                                      ; - Terminate imp Proccess;
    76                                      ;--------------------
    77 0000009B EBFE                        jmp $               ; Infinite loop.
    78                                  
    79                                  ;--------------------
    80                                  ; - 0x0A is LF(Line Feed).
    81                                  ; - 0x0D is CR(Caridge Return).
    82                                  ;--------------------
    83 0000009D 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0
    83 000000A6 2E0A0D00           
    84 000000AA 4572726F7220736563-     .e0 db "Error sector read", 0
    84 000000B3 746F72207265616400 
    85                                  
    86                                  
    87                                  ;--------------------
    88                                  ; - Place every 2 bytes.
    89                                  ;--------------------
    90                                  ALIGN 2, db 0
    91                                  BOOT:
    92 000000BC 0000                    .DRIVE:   dw 0            ; drive number.
    93                                  
    94                                  ;--------------------
    95                                  ; - Declaration Module.
    96                                  ;--------------------
    97                                  %include "../modules/real_mode/putc.asm"
     1                              <1> putc:
     2                              <1>     ;---------------------
     3                              <1>     ; Create Stack Frame.
     4                              <1>     ;---------------------
     5 000000BE 55                  <1>     push bp          ; push to stack base pointer register.
     6 000000BF 89E5                <1>     mov  bp, sp      ; bp = sp. set top stack.
     7                              <1> 
     8                              <1>     ;---------------------
     9                              <1>     ; Saving Register.
    10                              <1>     ;---------------------
    11 000000C1 50                  <1>     push ax         ; ax (ah, al)
    12 000000C2 53                  <1>     push bx         ; bx
    13 000000C3 56                  <1>     push si         ; si
    14                              <1> 
    15                              <1>     ;---------------------
    16                              <1>     ; Get func argument.
    17                              <1>     ;---------------------
    18 000000C4 8B7604              <1>     mov si, [bp + 4]
    19                              <1> 
    20                              <1>     ;---------------------
    21                              <1>     ; Starting put process.
    22                              <1>     ;---------------------
    23 000000C7 B40E                <1>     mov ah, 0x0E    ; show Character output.
    24 000000C9 BB0000              <1>     mov bx, 0x0000  ; set page number & text color to 0
    25 000000CC FC                  <1>     cld             ; DF = 0.
    26                              <1> 
    27                              <1> .10L:               ; do
    28                              <1>                     ; {
    29 000000CD AC                  <1>     lodsb           ; AL = *SI++.
    30                              <1>                     ;
    31 000000CE 3C00                <1>     cmp al, 0       ; if(0 == AL)
    32 000000D0 7404                <1>     je .10E         ; break
    33                              <1>                     ;
    34 000000D2 CD10                <1>     int 0x10        ; Int10(0x0E, AL); prrint char.
    35 000000D4 EBF7                <1>     jmp .10L        ;
    36                              <1> .10E:               ; while(1)
    37                              <1> 
    38                              <1>     ;---------------------
    39                              <1>     ; return Register.
    40                              <1>     ;---------------------
    41 000000D6 5E                  <1>     pop si
    42 000000D7 5B                  <1>     pop bx
    43 000000D8 58                  <1>     pop ax
    44                              <1> 
    45                              <1>     ;---------------------
    46                              <1>     ; reset Stack frame.
    47                              <1>     ;---------------------
    48 000000D9 89EC                <1>     mov sp, bp
    49 000000DB 5D                  <1>     pop bp
    50 000000DC C3                  <1>     ret
    98                                  %include "../modules/real_mode/reboot.asm"
     1                              <1> reboot:
     2                              <1>     ;; Show Message.
     3 000000DD 68[F900]E8DBFF83C4- <1>     cdecl putc, .s0             ; Show Rebooting Message.
     3 000000E5 02                  <1>
     4                              <1> 
     5                              <1>     ;; Waiting for keyboard.
     6                              <1> .10L:                           ; do
     7                              <1>                                 ; {
     8 000000E6 B410                <1>     mov ah, 0x10                ; // Wating for input keyboard.
     9 000000E8 CD16                <1>     int 0x16                    ; // AL = BIOS(0x16, 0x10)
    10                              <1>                                 ;
    11 000000EA 3C00                <1>     cmp al, ''                  ; ZF == AL == '';
    12 000000EC 75F8                <1>     jne .10L                    ; } while(ZF)
    13                              <1> 
    14                              <1>     ;; Return Space.
    15 000000EE 68[1701]E8CAFF83C4- <1>     cdecl putc, .s1
    15 000000F6 02                  <1>
    16                              <1> 
    17                              <1>     ;; Reboot.
    18 000000F7 CD19                <1>     int 0x19                    ; BIOS(0x19); reboot()
    19                              <1> 
    20                              <1>     ;; Character Data.
    21                              <1>     ;; .s0 is character value.
    22                              <1>     ;; .s1 is new line.
    23 000000F9 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    23 00000102 414345206B65792074- <1>
    23 0000010B 6F207265626F6F742E- <1>
    23 00000114 2E2E00              <1>
    24 00000117 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    99                                  
   100                                  ;--------------------
   101                                  ; - Boot Flag.
   102                                  ; - Maybe Reserve the first 512 bytes.
   103                                  ; - Write 0x55 and 0xAA to 510bytes.
   104                                  ;--------------------
   105 0000011C 00<rept>                times 510 - ($ - $$) db 0x00
   106 000001FE 55AA                    db    0x55, 0xAA
   107                                  
   108                                  stage_2:
   109                                      ;---------------------
   110                                      ;- second stage.
   111                                      ;---------------------
   112 00000200 68[0B02]E8B8FE83C4-         cdecl putc, .s0             ; putc(.s0)
   112 00000208 02                 
   113                                  
   114 00000209 EBFE                        jmp $
   115                                  
   116 0000020B 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   116 00000214 2E2E2E0A0D00       
   117                                      ;---------------------
   118                                      ;- second stage.
   119                                      ;---------------------
   120 0000021A 00<rept>                    times(1024 * 8) - ($ - $$) db 0 ; 8K byte
