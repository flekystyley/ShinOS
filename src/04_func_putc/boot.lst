     1                                  ;;; Configuration Boot Program.
     2                                  BOOT_LOAD equ 0x7c00 ; load to start boot program address.
     3                                  
     4                                  ORG BOOT_LOAD         ; instruction load address to assembler.
     5                                  
     6                                  %include "../include/macro.asm"
     1                              <1> %macro cdecl 1-*nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call %1
    10                              <1>     
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1>     
    15                              <1> %endmacro
     7                                  
     8                                  ;;; Entry Point.
     9                                  entry:
    10                                  
    11                                      ; BPB(BIOS Parameter Block)
    12 00000000 EB58                        jmp ipl
    13 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    14                                  
    15                                  ;;; IPL(Initial Program Loader)
    16                                  ipl:
    17 0000005A FA                          cli                  ; disable interrupt.
    18                                      
    19 0000005B B80000                      mov ax, 0x0000       ; AX = 0x0000;
    20 0000005E 8ED8                        mov ds, ax           ; DS = 0x0000;
    21 00000060 8EC0                        mov es, ax           ; ES = 0x0000;
    22 00000062 8ED0                        mov ss, ax           ; SS = 0x0000;
    23 00000064 BC007C                      mov sp, BOOT_LOAD    ; SP = 0x7c00;
    24                                  
    25 00000067 FB                          sti                  ; enable interrupt.
    26                                  
    27 00000068 8816[C600]                  mov [BOOT.DRIVE], dl ; saving Boot Drive. 
    28                                  
    29                                      cdecl putc, word'H'
    29                              <1> 
    29                              <1>  %rep %0 - 1
    29                              <1>  push %-1:-1
    29                              <1>  %rotate -1
    29                              <1>  %endrep
    29 0000006C 6A48                <2>  push %-1:-1
    29                              <2>  %rotate -1
    29                              <1>  %rotate -1
    29                              <1> 
    29 0000006E E85700              <1>  call %1
    29                              <1> 
    29                              <1>  %if 1 < %0
    29 00000071 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <1>  %endif
    29                              <1> 
    30                                      cdecl putc, word'E'
    30                              <1> 
    30                              <1>  %rep %0 - 1
    30                              <1>  push %-1:-1
    30                              <1>  %rotate -1
    30                              <1>  %endrep
    30 00000074 6A45                <2>  push %-1:-1
    30                              <2>  %rotate -1
    30                              <1>  %rotate -1
    30                              <1> 
    30 00000076 E84F00              <1>  call %1
    30                              <1> 
    30                              <1>  %if 1 < %0
    30 00000079 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    30                              <1>  %endif
    30                              <1> 
    31                                      cdecl putc, word'L'
    31                              <1> 
    31                              <1>  %rep %0 - 1
    31                              <1>  push %-1:-1
    31                              <1>  %rotate -1
    31                              <1>  %endrep
    31 0000007C 6A4C                <2>  push %-1:-1
    31                              <2>  %rotate -1
    31                              <1>  %rotate -1
    31                              <1> 
    31 0000007E E84700              <1>  call %1
    31                              <1> 
    31                              <1>  %if 1 < %0
    31 00000081 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <1>  %endif
    31                              <1> 
    32                                      cdecl putc, word'L'
    32                              <1> 
    32                              <1>  %rep %0 - 1
    32                              <1>  push %-1:-1
    32                              <1>  %rotate -1
    32                              <1>  %endrep
    32 00000084 6A4C                <2>  push %-1:-1
    32                              <2>  %rotate -1
    32                              <1>  %rotate -1
    32                              <1> 
    32 00000086 E83F00              <1>  call %1
    32                              <1> 
    32                              <1>  %if 1 < %0
    32 00000089 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    32                              <1>  %endif
    32                              <1> 
    33                                      cdecl putc, word'O'
    33                              <1> 
    33                              <1>  %rep %0 - 1
    33                              <1>  push %-1:-1
    33                              <1>  %rotate -1
    33                              <1>  %endrep
    33 0000008C 6A4F                <2>  push %-1:-1
    33                              <2>  %rotate -1
    33                              <1>  %rotate -1
    33                              <1> 
    33 0000008E E83700              <1>  call %1
    33                              <1> 
    33                              <1>  %if 1 < %0
    33 00000091 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    33                              <1>  %endif
    33                              <1> 
    34                                      cdecl putc, word'_'
    34                              <1> 
    34                              <1>  %rep %0 - 1
    34                              <1>  push %-1:-1
    34                              <1>  %rotate -1
    34                              <1>  %endrep
    34 00000094 6A5F                <2>  push %-1:-1
    34                              <2>  %rotate -1
    34                              <1>  %rotate -1
    34                              <1> 
    34 00000096 E82F00              <1>  call %1
    34                              <1> 
    34                              <1>  %if 1 < %0
    34 00000099 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <1>  %endif
    34                              <1> 
    35                                      cdecl putc, word'W'
    35                              <1> 
    35                              <1>  %rep %0 - 1
    35                              <1>  push %-1:-1
    35                              <1>  %rotate -1
    35                              <1>  %endrep
    35 0000009C 6A57                <2>  push %-1:-1
    35                              <2>  %rotate -1
    35                              <1>  %rotate -1
    35                              <1> 
    35 0000009E E82700              <1>  call %1
    35                              <1> 
    35                              <1>  %if 1 < %0
    35 000000A1 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    35                              <1>  %endif
    35                              <1> 
    36                                      cdecl putc, word'O'
    36                              <1> 
    36                              <1>  %rep %0 - 1
    36                              <1>  push %-1:-1
    36                              <1>  %rotate -1
    36                              <1>  %endrep
    36 000000A4 6A4F                <2>  push %-1:-1
    36                              <2>  %rotate -1
    36                              <1>  %rotate -1
    36                              <1> 
    36 000000A6 E81F00              <1>  call %1
    36                              <1> 
    36                              <1>  %if 1 < %0
    36 000000A9 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    36                              <1>  %endif
    36                              <1> 
    37                                      cdecl putc, word'R'
    37                              <1> 
    37                              <1>  %rep %0 - 1
    37                              <1>  push %-1:-1
    37                              <1>  %rotate -1
    37                              <1>  %endrep
    37 000000AC 6A52                <2>  push %-1:-1
    37                              <2>  %rotate -1
    37                              <1>  %rotate -1
    37                              <1> 
    37 000000AE E81700              <1>  call %1
    37                              <1> 
    37                              <1>  %if 1 < %0
    37 000000B1 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    37                              <1>  %endif
    37                              <1> 
    38                                      cdecl putc, word'L'
    38                              <1> 
    38                              <1>  %rep %0 - 1
    38                              <1>  push %-1:-1
    38                              <1>  %rotate -1
    38                              <1>  %endrep
    38 000000B4 6A4C                <2>  push %-1:-1
    38                              <2>  %rotate -1
    38                              <1>  %rotate -1
    38                              <1> 
    38 000000B6 E80F00              <1>  call %1
    38                              <1> 
    38                              <1>  %if 1 < %0
    38 000000B9 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    38                              <1>  %endif
    38                              <1> 
    39                                      cdecl putc, word'D'
    39                              <1> 
    39                              <1>  %rep %0 - 1
    39                              <1>  push %-1:-1
    39                              <1>  %rotate -1
    39                              <1>  %endrep
    39 000000BC 6A44                <2>  push %-1:-1
    39                              <2>  %rotate -1
    39                              <1>  %rotate -1
    39                              <1> 
    39 000000BE E80700              <1>  call %1
    39                              <1> 
    39                              <1>  %if 1 < %0
    39 000000C1 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    39                              <1>  %endif
    39                              <1> 
    40                                      
    41                                      ; Terminate imp Proccess;
    42 000000C4 EBFE                        jmp $ ; infinite loop.
    43                                  
    44                                  ALIGN 2, db 0
    45                                  BOOT:           ; boot info.
    46 000000C6 0000                    .DRIVE  dw 0    ; drive number.
    47                                  
    48                                  %include "../modules/real_mode/putc.asm"
     1                              <1> putc:
     2                              <1>     ;;; Create Stack Frame.
     3 000000C8 55                  <1>     push bp         ; push to stack base pointer register.
     4 000000C9 89E5                <1>     mov bp, sp      ; bp = sp. set top stack.
     5                              <1>     
     6                              <1>     ;;; Saving Register.
     7 000000CB 50                  <1>     push ax         ; ax (ah, al)
     8 000000CC 53                  <1>     push bx         ; bx
     9                              <1>     
    10                              <1>     ;;; Starting put process.
    11 000000CD 8A4604              <1>     mov al, [bp+4]  ; get Character output. access to first argument, al = arg.
    12 000000D0 B40E                <1>     mov ah, 0x0E    ; show Character output.
    13 000000D2 BB0000              <1>     mov bx, 0x0000  ; set page number & text color to 0
    14                              <1>     
    15 000000D5 CD10                <1>     int 0x10        ; call VideoBios.
    16                              <1> 
    17                              <1>     ;;; return Register
    18 000000D7 5B                  <1>     pop bx
    19 000000D8 58                  <1>     pop ax
    20                              <1> 
    21                              <1>     ;;; reset Stack frame.
    22 000000D9 89EC                <1>     mov sp, bp
    23 000000DB 5D                  <1>     pop bp
    24 000000DC C3                  <1>     ret
    49                                  
    50                                  ;;; Boot Flag.
    51 000000DD 00<rept>                times 510 - ($ - $$) db 0x00
    52 000001FE 55AA                    db 0x55, 0xAA
