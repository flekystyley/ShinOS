     1                                  ;;; Configration Start to Boot Program Address.
     2                                  BOOT_LOAD equ 0x7c00 ; load to start boot program address.
     3                                  ORG BOOT_LOAD         ; instruction load address to assembler.
     4                                  
     5                                  
     6                                  ;;; Declaration Macro.
     7                                  %include "../include/macro.asm"
     1                              <1> %macro cdecl 1-*nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call %1
    10                              <1>     
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1>     
    15                              <1> %endmacro
     8                                  
     9                                  ;;; (1) Entry Point.
    10                                  entry:
    11                                  
    12                                      ; BPB(BIOS Parameter Block)
    13                                      ; BIOSが必要としている、情報
    14 00000000 EB58                        jmp ipl
    15                                      ; 0x90に90byte分のBPBを確保する
    16                                      ; NOP命令(なにもしない)
    17 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    18                                  
    19                                  ;;; (2) IPL(Initial Program Loader. ex. Boot Program)
    20                                  ipl:
    21 0000005A FA                          cli                  ; disable interrupt.
    22                                      
    23                                      ; configuration Segment Register.
    24                                      ; Segmentとは、メモリをある程度の粒度をもって分けたもの
    25 0000005B B80000                      mov ax, 0x0000       ; AX = 0x0000;
    26                                  
    27 0000005E 8ED8                        mov ds, ax           ; DS = 0x0000;
    28 00000060 8EC0                        mov es, ax           ; ES = 0x0000;
    29 00000062 8ED0                        mov ss, ax           ; SS = 0x0000;
    30                                  
    31                                      ; ブートプログラムの開始位置をstack pointerに積む.
    32 00000064 BC007C                      mov sp, BOOT_LOAD    ; SP = 0x7c00;
    33                                  
    34 00000067 FB                          sti                  ; enable interrupt.
    35                                  
    36                                      ; dl register(I/O操作)レジスタを BOOT.DRIVE dw registerに格納
    37 00000068 8816[8400]                  mov [BOOT.DRIVE], dl ; saving Boot Drive. 
    38                                  
    39                                      cdecl putc, .s0
    39                              <1> 
    39                              <1>  %rep %0 - 1
    39                              <1>  push %-1:-1
    39                              <1>  %rotate -1
    39                              <1>  %endrep
    39 0000006C 68[7700]            <2>  push %-1:-1
    39                              <2>  %rotate -1
    39                              <1>  %rotate -1
    39                              <1> 
    39 0000006F E81400              <1>  call %1
    39                              <1> 
    39                              <1>  %if 1 < %0
    39 00000072 83C402              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    39                              <1>  %endif
    39                              <1> 
    40                                      
    41                                      ; Terminate imp Proccess;
    42 00000075 EBFE                        jmp $ ; infinite loop.
    43                                  
    44                                  ;;; 0x0A is LF カーソルの位置を一行下げる
    45                                  ;;; 0x0D is CR カーソルの位置を左端に戻す
    46 00000077 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0
    46 00000080 2E0A0D00           
    47                                  
    48                                  ; データを2バイト境界で設置する
    49                                  ALIGN 2, db 0
    50                                  BOOT:           ; boot info.
    51 00000084 0000                    .DRIVE  dw 0    ; drive number.
    52                                  
    53                                  ;;; Declaration Module.
    54                                  %include "../modules/real_mode/putc.asm"
     1                              <1> putc:
     2                              <1>     ;---------------------
     3                              <1>     ; Create Stack Frame.
     4                              <1>     ;---------------------
     5 00000086 55                  <1>     push bp          ; push to stack base pointer register.
     6 00000087 89E5                <1>     mov  bp, sp      ; bp = sp. set top stack.
     7                              <1> 
     8                              <1>     ;---------------------
     9                              <1>     ; Saving Register.
    10                              <1>     ;---------------------
    11 00000089 50                  <1>     push ax         ; ax (ah, al)
    12 0000008A 53                  <1>     push bx         ; bx
    13 0000008B 56                  <1>     push si         ; si
    14                              <1> 
    15                              <1>     ;---------------------
    16                              <1>     ; Get func argument.
    17                              <1>     ;---------------------
    18 0000008C 8B7604              <1>     mov si, [bp+4]
    19                              <1> 
    20                              <1>     ;---------------------
    21                              <1>     ; Starting put process.
    22                              <1>     ;---------------------
    23 0000008F B40E                <1>     mov ah, 0x0E    ; show Character output.
    24 00000091 BB0000              <1>     mov bx, 0x0000  ; set page number & text color to 0
    25 00000094 FC                  <1>     cld             ; DF = 0.
    26                              <1> 
    27                              <1> .10L:               ; do
    28                              <1>                     ; {
    29 00000095 AC                  <1>     lodsb           ; AL = *SI++.
    30                              <1>                     ;
    31 00000096 3C00                <1>     cmp al, 0       ; if(0 == AL)
    32 00000098 7404                <1>     je .10E         ; break
    33                              <1>                     ;
    34 0000009A CD10                <1>     int 0x10        ; Int10(0x0E, AL); prrint char.
    35 0000009C EBF7                <1>     jmp .10L        ;
    36                              <1> .10E:               ; while(1)
    37                              <1> 
    38                              <1>     ;---------------------
    39                              <1>     ; return Register.
    40                              <1>     ;---------------------    
    41 0000009E 5E                  <1>     pop si
    42 0000009F 5B                  <1>     pop bx
    43 000000A0 58                  <1>     pop ax
    44                              <1> 
    45                              <1>     ;---------------------
    46                              <1>     ; reset Stack frame.
    47                              <1>     ;---------------------
    48 000000A1 89EC                <1>     mov sp, bp
    49 000000A3 5D                  <1>     pop bp
    50 000000A4 C3                  <1>     ret
    55                                  
    56                                  ;;; Boot Flag.
    57                                  ; 510bytes目に0x55と0xAAを書き込む.
    58                                  ; 先頭512byteまでを確保する??
    59 000000A5 00<rept>                times 510 - ($ - $$) db 0x00
    60 000001FE 55AA                    db 0x55, 0xAA
